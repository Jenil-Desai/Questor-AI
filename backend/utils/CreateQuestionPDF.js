import PDFDocument from "pdfkit";
import path from "path";
import fs from "fs";

export default async function createQuestionPDF(questionPaper) {
  const dir = "./pdfs";

  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  const filePath = path.join(dir, `${questionPaper.title.replace(/\s+/g, "_")}-Question-Paper-Questro-AI-${questionPaper.id}.pdf`);
  const doc = new PDFDocument();

  return new Promise((resolve, reject) => {
    const stream = fs.createWriteStream(filePath);
    doc.pipe(stream);

    doc.fontSize(20).text(`${questionPaper.title} - Question Paper`, { align: "center", underline: true });
    doc.moveDown();

    doc
      .fontSize(12)
      .text(`Total Marks: ${questionPaper.totalMarks}`)
      .text(`Difficulty: ${questionPaper.difficulty.charAt(0).toUpperCase() + questionPaper.difficulty.slice(1)}`);
    doc.moveDown();

    const generatedAt = new Date().toLocaleString("en-IN", { dateStyle: "long", hour12: true });
    doc.fontSize(12).text(`PDF Generated At: ${generatedAt}`);
    doc.moveDown();

    doc.fontSize(14).text("Question Paper Weight:");
    doc.moveDown();
    questionPaper.questionTypes.forEach((type) => {
      doc.fontSize(12).text(`- ${type.type}: ${type.numberOfQuestions} questions | ${type.marksPerQuestion} marks each`);
    });
    doc.moveDown();

    questionPaper.questions.forEach((q, index) => {
      doc.fontSize(14).text(`${index + 1}. ${q.question}`);
      if (q.type === "MCQ") {
        doc.fontSize(12).list(q.options);
      }
      doc.moveDown();
    });

    doc.fontSize(10).fillColor("blue").text("Generated By Questro AI", { align: "center", link: "https://google.com" });

    doc.end();

    stream.on("finish", () => resolve(filePath));
    stream.on("error", (err) => reject(`Error creating PDF: ${err.message}`));
  });
}
